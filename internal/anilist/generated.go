// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package anilist

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

type MediaListStatus string

const (
	MediaListStatusCompleted MediaListStatus = "COMPLETED"
	MediaListStatusCurrent   MediaListStatus = "CURRENT"
	MediaListStatusDropped   MediaListStatus = "DROPPED"
	MediaListStatusPaused    MediaListStatus = "PAUSED"
	MediaListStatusPlanning  MediaListStatus = "PLANNING"
	MediaListStatusRepeating MediaListStatus = "REPEATING"
)

type MediaType string

const (
	MediaTypeAnime MediaType = "ANIME"
	MediaTypeManga MediaType = "MANGA"
)

// __getUserMediaListCollectionInput is used internally by genqlient
type __getUserMediaListCollectionInput struct {
	UserId   int32           `json:"UserId"`
	UserName string          `json:"UserName"`
	Status   MediaListStatus `json:"Status"`
	Type     MediaType       `json:"Type"`
}

// GetUserId returns __getUserMediaListCollectionInput.UserId, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionInput) GetUserId() int32 { return v.UserId }

// GetUserName returns __getUserMediaListCollectionInput.UserName, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionInput) GetUserName() string { return v.UserName }

// GetStatus returns __getUserMediaListCollectionInput.Status, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionInput) GetStatus() MediaListStatus { return v.Status }

// GetType returns __getUserMediaListCollectionInput.Type, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionInput) GetType() MediaType { return v.Type }

// getUserMediaListCollectionMediaListCollection includes the requested fields of the GraphQL type MediaListCollection.
type getUserMediaListCollectionMediaListCollection struct {
	Lists []getUserMediaListCollectionMediaListCollectionListsMediaListGroup `json:"lists"`
}

// GetLists returns getUserMediaListCollectionMediaListCollection.Lists, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollection) GetLists() []getUserMediaListCollectionMediaListCollectionListsMediaListGroup {
	return v.Lists
}

// getUserMediaListCollectionMediaListCollectionListsMediaListGroup includes the requested fields of the GraphQL type MediaListGroup.
type getUserMediaListCollectionMediaListCollectionListsMediaListGroup struct {
	Entries []getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList `json:"entries"`
}

// GetEntries returns getUserMediaListCollectionMediaListCollectionListsMediaListGroup.Entries, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroup) GetEntries() []getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList {
	return v.Entries
}

// getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList includes the requested fields of the GraphQL type MediaList.
type getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList struct {
	mediaListEntry `json:"-"`
}

// GetId returns getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList.Id, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList) GetId() int32 {
	return v.mediaListEntry.Id
}

// GetMediaId returns getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList.MediaId, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList) GetMediaId() int32 {
	return v.mediaListEntry.MediaId
}

// GetMedia returns getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList.Media, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList) GetMedia() mediaListEntryMedia {
	return v.mediaListEntry.Media
}

func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList
		graphql.NoUnmarshalJSON
	}
	firstPass.getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaListEntry)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList struct {
	Id int32 `json:"id"`

	MediaId int32 `json:"mediaId"`

	Media mediaListEntryMedia `json:"media"`
}

func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList) __premarshalJSON() (*__premarshalgetUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList, error) {
	var retval __premarshalgetUserMediaListCollectionMediaListCollectionListsMediaListGroupEntriesMediaList

	retval.Id = v.mediaListEntry.Id
	retval.MediaId = v.mediaListEntry.MediaId
	retval.Media = v.mediaListEntry.Media
	return &retval, nil
}

// getUserMediaListCollectionResponse is returned by getUserMediaListCollection on success.
type getUserMediaListCollectionResponse struct {
	MediaListCollection getUserMediaListCollectionMediaListCollection `json:"MediaListCollection"`
}

// GetMediaListCollection returns getUserMediaListCollectionResponse.MediaListCollection, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionResponse) GetMediaListCollection() getUserMediaListCollectionMediaListCollection {
	return v.MediaListCollection
}

// mediaListEntry includes the GraphQL fields of MediaList requested by the fragment mediaListEntry.
type mediaListEntry struct {
	Id      int32               `json:"id"`
	MediaId int32               `json:"mediaId"`
	Media   mediaListEntryMedia `json:"media"`
}

// GetId returns mediaListEntry.Id, and is useful for accessing the field via an interface.
func (v *mediaListEntry) GetId() int32 { return v.Id }

// GetMediaId returns mediaListEntry.MediaId, and is useful for accessing the field via an interface.
func (v *mediaListEntry) GetMediaId() int32 { return v.MediaId }

// GetMedia returns mediaListEntry.Media, and is useful for accessing the field via an interface.
func (v *mediaListEntry) GetMedia() mediaListEntryMedia { return v.Media }

// mediaListEntryMedia includes the requested fields of the GraphQL type Media.
type mediaListEntryMedia struct {
	Title mediaListEntryMediaTitle `json:"title"`
}

// GetTitle returns mediaListEntryMedia.Title, and is useful for accessing the field via an interface.
func (v *mediaListEntryMedia) GetTitle() mediaListEntryMediaTitle { return v.Title }

// mediaListEntryMediaTitle includes the requested fields of the GraphQL type Title.
type mediaListEntryMediaTitle struct {
	English string `json:"english"`
}

// GetEnglish returns mediaListEntryMediaTitle.English, and is useful for accessing the field via an interface.
func (v *mediaListEntryMediaTitle) GetEnglish() string { return v.English }

// The query or mutation executed by getUserMediaListCollection.
const getUserMediaListCollection_Operation = `
query getUserMediaListCollection ($UserId: Int!, $UserName: String!, $Status: MediaListStatus, $Type: MediaType!) {
	MediaListCollection(userId: $UserId, userName: $UserName, status_in: [$Status], type: $Type) {
		lists {
			entries {
				... mediaListEntry
			}
		}
	}
}
fragment mediaListEntry on MediaList {
	id
	mediaId
	media {
		title {
			english
		}
	}
}
`

func getUserMediaListCollection(
	ctx_ context.Context,
	client_ graphql.Client,
	UserId int32,
	UserName string,
	Status MediaListStatus,
	Type MediaType,
) (*getUserMediaListCollectionResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUserMediaListCollection",
		Query:  getUserMediaListCollection_Operation,
		Variables: &__getUserMediaListCollectionInput{
			UserId:   UserId,
			UserName: UserName,
			Status:   Status,
			Type:     Type,
		},
	}
	var err_ error

	var data_ getUserMediaListCollectionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
