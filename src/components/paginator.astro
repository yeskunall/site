---
import type { PaginationLink } from "@/data/shared";

interface Props {
  prevUrl?: PaginationLink;
  nextUrl?: PaginationLink;
}

const { prevUrl, nextUrl } = Astro.props;
---

{
  (prevUrl || nextUrl) && (
  // NOTE(yeskunall): I could over-engineer this and pass the `pageSize` as a
  // prop to then stagger using the variable, or I could go grugbrain.dev and
  // just set it to `2*pageSize` since `pageSize` is 5. There is a trade-off, that is,
  // if I ever _do_ change the `pageSize`, Iâ€™ll have to come and change the
  // `stagger` amount here too. But right now, the GRUG BRAIN DEVELOPER IN ME
  // LIKES THIS.
    <nav
      class="mt-8 flex items-center gap-x-4"
      data-animate
      style="--stagger:14"
    >
      {prevUrl && (
        <a
          class="me-auto !cursor-pointer py-2 font-serif text-neutral-900/70"
          href={prevUrl.url}
          rel="prefetch"
        >
          {prevUrl.srLabel && <span class="sr-only">{prevUrl.srLabel}</span>}
          {prevUrl.text ? prevUrl.text : "Previous"}
        </a>
      )}
      {nextUrl && (
        <a
          class="ms-auto !cursor-pointer py-2 font-serif text-neutral-900/70"
          href={nextUrl.url}
          rel="prefetch"
        >
          {nextUrl.srLabel && <span class="sr-only">{nextUrl.srLabel}</span>}
          {nextUrl.text ? nextUrl.text : "Next"}
        </a>
      )}
    </nav>
  )
}

<style>
  @keyframes enter {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }

    to {
      opacity: 1;
      transform: none;
    }
  }

  [data-animate] {
    --delay: 120ms;
    --stagger: 0;
    --start: 0ms;
  }

  @media (prefers-reduced-motion: no-preference) {
    [data-animate] {
      animation: enter 0.6s both;
      animation-delay: calc(var(--delay) * var(--stagger) + var(--start));
    }
  }
</style>
