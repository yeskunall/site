---
import { getCollection } from "astro:content";

import PageLayout from "@/layouts/Base";
import PostPreview from "@/components/blog/PostPreview.astro";
import Pagination from "@/components/Paginator.astro";
import { getUniqueTags, sortByDate } from "@/utils";

import type { CollectionEntry } from "astro:content";
import type { GetStaticPaths, Page } from "astro";

export const getStaticPaths = (async ({ paginate }) => {
  const allPosts = await getCollection("post");
  const allPostsByDate = sortByDate(allPosts);
  const uniqueTags = getUniqueTags(allPosts);

  return paginate(allPostsByDate, { props: { uniqueTags }, pageSize: 10 });
}) satisfies GetStaticPaths;

interface Props {
  page: Page<CollectionEntry<"post">>;
  uniqueTags: string[];
}

const { page, uniqueTags } = Astro.props;

const meta = {
  title: "Writing",
  description: "All my thoughts over the years.",
};

const paginationProps = {
  ...(page.url.prev && {
    prevUrl: {
      url: page.url.prev,
      text: `← Previous`,
    },
  }),
  ...(page.url.next && {
    nextUrl: {
      url: page.url.next,
      text: `Next →`,
    },
  }),
};
---

<PageLayout meta={meta}>
  <div class="space-y-6 text-base">
    <div class="grid gap-y-16 sm:grid-cols-[3fr_1fr] sm:gap-x-8">
      <section aria-label="Blog post list">
        <ul class="space-y-2 text-start">
          {
            page.data.map(p => (
              <li class="mb-1.5 flex flex-col gap-2 transition-colors hover:text-sky-50/50 sm:mb-3 sm:flex-row">
                <PostPreview post={p} as="h2" />
              </li>
            ))
          }
        </ul>
        <Pagination {...paginationProps} />
      </section>
      <!-- {
        uniqueTags.length && (
          <aside>
            <h2 class="mb-4 flex items-center text-lg font-semibold">
              <svg
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
                <path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
                <path d="M6 9h-.01" />
              </svg>
              Tags
            </h2>
            <ul class="text-bgColor flex flex-wrap gap-2">
              {uniqueTags.map(tag => (
                <li>
                  <a
                    class="flex items-center justify-center rounded-lg p-1"
                    href={`/tags/${tag}/`}
                    aria-label={`View all posts with the tag: ${tag}`}
                  >
                    {tag}
                  </a>
                </li>
              ))}
            </ul>
            <span class="mt-4 block sm:text-end">
              <a href="/tags/" aria-label="View all blog categories">
                View all →
              </a>
            </span>
          </aside>
        )
      } -->
    </div>
  </div>
</PageLayout>

<style>
  @media (hover: hover) {
    ul:hover li {
      opacity: 0.3;
    }

    ul:hover li:hover {
      opacity: 1;
      transition: color 0.1s ease-out;
    }
  }
</style>
